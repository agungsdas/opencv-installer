name: Build OpenCV for Multiple Platforms

on:
  push:
    branches:
      - master
  workflow_dispatch:  # Allow manual trigger

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: [amd64, arm64]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y cmake g++ wget unzip checkinstall curl jq ninja-build

      - name: Install Dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install cmake git vcredist2015 -y
          choco upgrade python312 -y --force --confirm

      - name: Install Dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install cmake ninja pkg-config

      - name: Set OpenCV Version
        shell: bash
        run: |
          OPENCV_VERSION="4.11.0"
          echo "OpenCV version: $OPENCV_VERSION"
          echo "version=$OPENCV_VERSION" >> "$GITHUB_ENV"

      - name: Clone OpenCV Source
        shell: bash
        run: |
          git clone --depth=1 --branch ${{ env.version }} https://github.com/opencv/opencv.git || git clone --depth=1 --branch master https://github.com/opencv/opencv.git
          git clone --depth=1 --branch ${{ env.version }} https://github.com/opencv/opencv_contrib.git || git clone --depth=1 --branch master https://github.com/opencv/opencv_contrib.git
          mkdir -p opencv/build

      - name: Build OpenCV for Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd opencv/build
          cmake -G Ninja -D CMAKE_BUILD_TYPE=Release \
                -D CMAKE_INSTALL_PREFIX=/usr/local \
                -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules \
                -D BUILD_opencv_aruco=OFF ..
          ninja
          sudo ninja install

      - name: Package OpenCV as `.deb`
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd opencv/build
          sudo checkinstall -D --install=no \
                            --pkgname=opencv4-custom-${{ matrix.arch }} \
                            --pkgversion=${{ env.version }} \
                            --default
          mv opencv4-custom-${{ matrix.arch }}_${{ env.version }}-1_${{ matrix.arch }}.deb ../../opencv-${{ matrix.arch }}.deb

      - name: Build OpenCV for Windows
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: |
          cd opencv\build
          cmake -G "Visual Studio 17 2022" -A x64 ^
                -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules ^
                -D BUILD_opencv_aruco=OFF ..
          cmake --build . --config Release --target install

      - name: Package OpenCV as `.msi`
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: |
          cd opencv\build
          cpack -G WIX
          move OpenCV*.msi ..\..\opencv-windows-x64.msi

      - name: Build OpenCV for macOS
        if: matrix.os == 'macos-latest'
        run: |
          cd opencv/build
          cmake -G "Unix Makefiles" -D CMAKE_BUILD_TYPE=Release \
                -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules \
                -D BUILD_opencv_aruco=OFF ..
          make -j$(sysctl -n hw.ncpu)
          sudo make install

      - name: Package OpenCV as `.pkg`
        if: matrix.os == 'macos-latest'
        run: |
          cd opencv/build
          sudo make install
          pkgbuild --root /usr/local --identifier org.opencv.pkg --version ${{ env.version }} ../../opencv-macos.pkg

      - name: Upload to GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG=${{ env.version }}
          RELEASE_NAME="OpenCV $TAG Build"

          echo "Checking if release exists..."
          gh release view "$TAG" || gh release create "$TAG" \
            --title "$RELEASE_NAME" \
            --notes "Latest OpenCV build without ArUco module." \
            --repo ${{ github.repository }} \
            --prerelease

          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            gh release upload "$TAG" "opencv-${{ env.version }}-${{ matrix.os }}-${{ matrix.arch }}.deb" --clobber
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            gh release upload "$TAG" "opencv-${{ env.version }}-${{ matrix.os }}-${{ matrix.arch }}.msi" --clobber
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            gh release upload "$TAG" "opencv-${{ env.version }}-${{ matrix.os }}-${{ matrix.arch }}.pkg" --clobber
          fi
